# Generated by protoc_gen_nim. Do not edit!

import base64
import intsets
import json
import strformat
import strutils

import nimpb/nimpb
import nimpb/json as nimpb_json

import common_pb
import error_pb

type
    RequestQuery* = ref RequestQueryObj
    RequestQueryObj* = object of Message
        pathing: seq[RequestQueryPathing]
        abilities: seq[RequestQueryAvailableAbilities]
        placements: seq[RequestQueryBuildingPlacement]
        ignoreResourceRequirements: bool
    ResponseQuery* = ref ResponseQueryObj
    ResponseQueryObj* = object of Message
        pathing: seq[ResponseQueryPathing]
        abilities: seq[ResponseQueryAvailableAbilities]
        placements: seq[ResponseQueryBuildingPlacement]
    RequestQueryPathing* = ref RequestQueryPathingObj
    RequestQueryPathingObj* = object of Message
        endPos: Point2D
        start: RequestQueryPathing_start_OneOf

    RequestQueryPathing_start_Kind* {.pure.} = enum
        StartPos
        UnitTag
        NotSet

    RequestQueryPathing_start_OneOf* = object
        case kind*: RequestQueryPathing_start_Kind
        of RequestQueryPathing_start_Kind.StartPos: startPos*: Point2D
        of RequestQueryPathing_start_Kind.UnitTag: unitTag*: uint64
        of RequestQueryPathing_start_Kind.NotSet: nil
    ResponseQueryPathing* = ref ResponseQueryPathingObj
    ResponseQueryPathingObj* = object of Message
        distance: float32
    RequestQueryAvailableAbilities* = ref RequestQueryAvailableAbilitiesObj
    RequestQueryAvailableAbilitiesObj* = object of Message
        unitTag: uint64
    ResponseQueryAvailableAbilities* = ref ResponseQueryAvailableAbilitiesObj
    ResponseQueryAvailableAbilitiesObj* = object of Message
        abilities: seq[AvailableAbility]
        unitTag: uint64
        unitTypeId: uint32
    RequestQueryBuildingPlacement* = ref RequestQueryBuildingPlacementObj
    RequestQueryBuildingPlacementObj* = object of Message
        abilityId: int32
        targetPos: Point2D
        placingUnitTag: uint64
    ResponseQueryBuildingPlacement* = ref ResponseQueryBuildingPlacementObj
    ResponseQueryBuildingPlacementObj* = object of Message
        result: ActionResult

proc newRequestQueryPathing*(): RequestQueryPathing
proc newRequestQueryPathing*(data: string): RequestQueryPathing
proc newRequestQueryPathing*(data: seq[byte]): RequestQueryPathing
proc writeRequestQueryPathing*(stream: Stream, message: RequestQueryPathing)
proc readRequestQueryPathing*(stream: Stream): RequestQueryPathing
proc sizeOfRequestQueryPathing*(message: RequestQueryPathing): uint64

proc newRequestQueryAvailableAbilities*(): RequestQueryAvailableAbilities
proc newRequestQueryAvailableAbilities*(data: string): RequestQueryAvailableAbilities
proc newRequestQueryAvailableAbilities*(data: seq[byte]): RequestQueryAvailableAbilities
proc writeRequestQueryAvailableAbilities*(stream: Stream, message: RequestQueryAvailableAbilities)
proc readRequestQueryAvailableAbilities*(stream: Stream): RequestQueryAvailableAbilities
proc sizeOfRequestQueryAvailableAbilities*(message: RequestQueryAvailableAbilities): uint64

proc newResponseQueryAvailableAbilities*(): ResponseQueryAvailableAbilities
proc newResponseQueryAvailableAbilities*(data: string): ResponseQueryAvailableAbilities
proc newResponseQueryAvailableAbilities*(data: seq[byte]): ResponseQueryAvailableAbilities
proc writeResponseQueryAvailableAbilities*(stream: Stream, message: ResponseQueryAvailableAbilities)
proc readResponseQueryAvailableAbilities*(stream: Stream): ResponseQueryAvailableAbilities
proc sizeOfResponseQueryAvailableAbilities*(message: ResponseQueryAvailableAbilities): uint64

proc newResponseQueryBuildingPlacement*(): ResponseQueryBuildingPlacement
proc newResponseQueryBuildingPlacement*(data: string): ResponseQueryBuildingPlacement
proc newResponseQueryBuildingPlacement*(data: seq[byte]): ResponseQueryBuildingPlacement
proc writeResponseQueryBuildingPlacement*(stream: Stream, message: ResponseQueryBuildingPlacement)
proc readResponseQueryBuildingPlacement*(stream: Stream): ResponseQueryBuildingPlacement
proc sizeOfResponseQueryBuildingPlacement*(message: ResponseQueryBuildingPlacement): uint64

proc newRequestQueryBuildingPlacement*(): RequestQueryBuildingPlacement
proc newRequestQueryBuildingPlacement*(data: string): RequestQueryBuildingPlacement
proc newRequestQueryBuildingPlacement*(data: seq[byte]): RequestQueryBuildingPlacement
proc writeRequestQueryBuildingPlacement*(stream: Stream, message: RequestQueryBuildingPlacement)
proc readRequestQueryBuildingPlacement*(stream: Stream): RequestQueryBuildingPlacement
proc sizeOfRequestQueryBuildingPlacement*(message: RequestQueryBuildingPlacement): uint64

proc newResponseQueryPathing*(): ResponseQueryPathing
proc newResponseQueryPathing*(data: string): ResponseQueryPathing
proc newResponseQueryPathing*(data: seq[byte]): ResponseQueryPathing
proc writeResponseQueryPathing*(stream: Stream, message: ResponseQueryPathing)
proc readResponseQueryPathing*(stream: Stream): ResponseQueryPathing
proc sizeOfResponseQueryPathing*(message: ResponseQueryPathing): uint64

proc newResponseQuery*(): ResponseQuery
proc newResponseQuery*(data: string): ResponseQuery
proc newResponseQuery*(data: seq[byte]): ResponseQuery
proc writeResponseQuery*(stream: Stream, message: ResponseQuery)
proc readResponseQuery*(stream: Stream): ResponseQuery
proc sizeOfResponseQuery*(message: ResponseQuery): uint64

proc newRequestQuery*(): RequestQuery
proc newRequestQuery*(data: string): RequestQuery
proc newRequestQuery*(data: seq[byte]): RequestQuery
proc writeRequestQuery*(stream: Stream, message: RequestQuery)
proc readRequestQuery*(stream: Stream): RequestQuery
proc sizeOfRequestQuery*(message: RequestQuery): uint64

proc fullyQualifiedName*(T: typedesc[RequestQueryPathing]): string = "RequestQueryPathing"

proc readRequestQueryPathingImpl(stream: Stream): Message = readRequestQueryPathing(stream)
proc writeRequestQueryPathingImpl(stream: Stream, msg: Message) = writeRequestQueryPathing(stream, RequestQueryPathing(msg))

proc RequestQueryPathingProcs*(): MessageProcs =
    result.readImpl = readRequestQueryPathingImpl
    result.writeImpl = writeRequestQueryPathingImpl

proc newRequestQueryPathing*(): RequestQueryPathing =
    new(result)
    initMessage(result[])
    result.procs = RequestQueryPathingProcs()
    result.endPos = nil
    result.start = RequestQueryPathing_start_OneOf(kind: RequestQueryPathing_start_Kind.NotSet)

proc clearstartPos*(message: RequestQueryPathing) =
    reset(message.start)
    message.start.kind = RequestQueryPathing_start_Kind.NotSet
    clearFields(message, [1, 2])

proc hasstartPos*(message: RequestQueryPathing): bool =
    result = hasField(message, 1)

proc setstartPos*(message: RequestQueryPathing, value: Point2D) =
    if message.start.kind != RequestQueryPathing_start_Kind.StartPos:
        message.start = RequestQueryPathing_start_OneOf(kind: RequestQueryPathing_start_Kind.StartPos, startPos: value)
    else:
        message.start.startPos = value
    setField(message, 1)
    clearFields(message, [2])

proc startPos*(message: RequestQueryPathing): Point2D {.inline.} =
    message.start.startPos

proc `startPos=`*(message: RequestQueryPathing, value: Point2D) {.inline.} =
    setstartPos(message, value)

proc clearunitTag*(message: RequestQueryPathing) =
    reset(message.start)
    message.start.kind = RequestQueryPathing_start_Kind.NotSet
    clearFields(message, [2, 1])

proc hasunitTag*(message: RequestQueryPathing): bool =
    result = hasField(message, 2)

proc setunitTag*(message: RequestQueryPathing, value: uint64) =
    if message.start.kind != RequestQueryPathing_start_Kind.UnitTag:
        message.start = RequestQueryPathing_start_OneOf(kind: RequestQueryPathing_start_Kind.UnitTag, unitTag: value)
    else:
        message.start.unitTag = value
    setField(message, 2)
    clearFields(message, [1])

proc unitTag*(message: RequestQueryPathing): uint64 {.inline.} =
    message.start.unitTag

proc `unitTag=`*(message: RequestQueryPathing, value: uint64) {.inline.} =
    setunitTag(message, value)

proc clearendPos*(message: RequestQueryPathing) =
    message.endPos = nil
    clearFields(message, [3])

proc hasendPos*(message: RequestQueryPathing): bool =
    result = hasField(message, 3)

proc setendPos*(message: RequestQueryPathing, value: Point2D) =
    message.endPos = value
    setField(message, 3)

proc endPos*(message: RequestQueryPathing): Point2D {.inline.} =
    message.endPos

proc `endPos=`*(message: RequestQueryPathing, value: Point2D) {.inline.} =
    setendPos(message, value)

proc `$`*(message: RequestQueryPathing): string =
    runnableExamples:
        echo $RequestQueryPathing
        echo fmt"{RequestQueryPathing}"
        echo &"{RequestQueryPathing}"
    var resultSeq: seq[string]
    if message.hasendPos:
        resultSeq.add(&"endPos: {message.endPos}")
    if message.hasstartPos:
        resultSeq.add(&"startPos: {message.startPos}")
    if message.hasunitTag:
        resultSeq.add(&"unitTag: {message.unitTag}")
    result = resultSeq.join(", ")
    result = &"RequestQueryPathing({result})"

proc sizeOfRequestQueryPathing*(message: RequestQueryPathing): uint64 =
    if hasstartPos(message):
        result = result + sizeOfTag(1, WireType.LengthDelimited)
        result = result + sizeOfLengthDelimited(sizeOfPoint2D(message.start.startPos))
    if hasunitTag(message):
        result = result + sizeOfTag(2, WireType.Varint)
        result = result + sizeOfUInt64(message.start.unitTag)
    if hasendPos(message):
        result = result + sizeOfTag(3, WireType.LengthDelimited)
        result = result + sizeOfLengthDelimited(sizeOfPoint2D(message.endPos))
    result = result + sizeOfUnknownFields(message)

proc writeRequestQueryPathing*(stream: Stream, message: RequestQueryPathing) =
    if hasstartPos(message):
        writeMessage(stream, message.start.startPos, 1)
    if hasunitTag(message):
        protoWriteUInt64(stream, message.start.unitTag, 2)
    if hasendPos(message):
        writeMessage(stream, message.endPos, 3)
    writeUnknownFields(stream, message)

proc readRequestQueryPathing*(stream: Stream): RequestQueryPathing =
    result = newRequestQueryPathing()
    while not atEnd(stream):
        let
            tag = readTag(stream)
            wireType = wireType(tag)
        case fieldNumber(tag)
        of 0:
            raise newException(InvalidFieldNumberError, "Invalid field number: 0")
        of 1:
            expectWireType(wireType, WireType.LengthDelimited)
            let data = readLengthDelimited(stream)
            setstartPos(result, newPoint2D(data))
        of 2:
            expectWireType(wireType, WireType.Varint)
            setunitTag(result, protoReadUInt64(stream))
        of 3:
            expectWireType(wireType, WireType.LengthDelimited)
            let data = readLengthDelimited(stream)
            setendPos(result, newPoint2D(data))
        else: readUnknownField(stream, result, tag)

proc serialize*(message: RequestQueryPathing): string =
    let
        ss = newStringStream()
    writeRequestQueryPathing(ss, message)
    result = ss.data

proc newRequestQueryPathing*(data: string): RequestQueryPathing =
    let
        ss = newStringStream(data)
    result = readRequestQueryPathing(ss)

proc newRequestQueryPathing*(data: seq[byte]): RequestQueryPathing =
    let
        ss = newStringStream(cast[string](data))
    result = readRequestQueryPathing(ss)


proc fullyQualifiedName*(T: typedesc[RequestQueryAvailableAbilities]): string = "RequestQueryAvailableAbilities"

proc readRequestQueryAvailableAbilitiesImpl(stream: Stream): Message = readRequestQueryAvailableAbilities(stream)
proc writeRequestQueryAvailableAbilitiesImpl(stream: Stream, msg: Message) = writeRequestQueryAvailableAbilities(stream, RequestQueryAvailableAbilities(msg))

proc RequestQueryAvailableAbilitiesProcs*(): MessageProcs =
    result.readImpl = readRequestQueryAvailableAbilitiesImpl
    result.writeImpl = writeRequestQueryAvailableAbilitiesImpl

proc newRequestQueryAvailableAbilities*(): RequestQueryAvailableAbilities =
    new(result)
    initMessage(result[])
    result.procs = RequestQueryAvailableAbilitiesProcs()
    result.unitTag = 0

proc clearunitTag*(message: RequestQueryAvailableAbilities) =
    message.unitTag = 0
    clearFields(message, [1])

proc hasunitTag*(message: RequestQueryAvailableAbilities): bool =
    result = hasField(message, 1)

proc setunitTag*(message: RequestQueryAvailableAbilities, value: uint64) =
    message.unitTag = value
    setField(message, 1)

proc unitTag*(message: RequestQueryAvailableAbilities): uint64 {.inline.} =
    message.unitTag

proc `unitTag=`*(message: RequestQueryAvailableAbilities, value: uint64) {.inline.} =
    setunitTag(message, value)

proc `$`*(message: RequestQueryAvailableAbilities): string =
    runnableExamples:
        echo $RequestQueryAvailableAbilities
        echo fmt"{RequestQueryAvailableAbilities}"
        echo &"{RequestQueryAvailableAbilities}"
    var resultSeq: seq[string]
    if message.hasunitTag:
        resultSeq.add(&"unitTag: {message.unitTag}")
    result = resultSeq.join(", ")
    result = &"RequestQueryAvailableAbilities({result})"

proc sizeOfRequestQueryAvailableAbilities*(message: RequestQueryAvailableAbilities): uint64 =
    if hasunitTag(message):
        result = result + sizeOfTag(1, WireType.Varint)
        result = result + sizeOfUInt64(message.unitTag)
    result = result + sizeOfUnknownFields(message)

proc writeRequestQueryAvailableAbilities*(stream: Stream, message: RequestQueryAvailableAbilities) =
    if hasunitTag(message):
        protoWriteUInt64(stream, message.unitTag, 1)
    writeUnknownFields(stream, message)

proc readRequestQueryAvailableAbilities*(stream: Stream): RequestQueryAvailableAbilities =
    result = newRequestQueryAvailableAbilities()
    while not atEnd(stream):
        let
            tag = readTag(stream)
            wireType = wireType(tag)
        case fieldNumber(tag)
        of 0:
            raise newException(InvalidFieldNumberError, "Invalid field number: 0")
        of 1:
            expectWireType(wireType, WireType.Varint)
            setunitTag(result, protoReadUInt64(stream))
        else: readUnknownField(stream, result, tag)

proc serialize*(message: RequestQueryAvailableAbilities): string =
    let
        ss = newStringStream()
    writeRequestQueryAvailableAbilities(ss, message)
    result = ss.data

proc newRequestQueryAvailableAbilities*(data: string): RequestQueryAvailableAbilities =
    let
        ss = newStringStream(data)
    result = readRequestQueryAvailableAbilities(ss)

proc newRequestQueryAvailableAbilities*(data: seq[byte]): RequestQueryAvailableAbilities =
    let
        ss = newStringStream(cast[string](data))
    result = readRequestQueryAvailableAbilities(ss)


proc fullyQualifiedName*(T: typedesc[ResponseQueryAvailableAbilities]): string = "ResponseQueryAvailableAbilities"

proc readResponseQueryAvailableAbilitiesImpl(stream: Stream): Message = readResponseQueryAvailableAbilities(stream)
proc writeResponseQueryAvailableAbilitiesImpl(stream: Stream, msg: Message) = writeResponseQueryAvailableAbilities(stream, ResponseQueryAvailableAbilities(msg))

proc ResponseQueryAvailableAbilitiesProcs*(): MessageProcs =
    result.readImpl = readResponseQueryAvailableAbilitiesImpl
    result.writeImpl = writeResponseQueryAvailableAbilitiesImpl

proc newResponseQueryAvailableAbilities*(): ResponseQueryAvailableAbilities =
    new(result)
    initMessage(result[])
    result.procs = ResponseQueryAvailableAbilitiesProcs()
    result.abilities = @[]
    result.unitTag = 0
    result.unitTypeId = 0

proc clearabilities*(message: ResponseQueryAvailableAbilities) =
    message.abilities = @[]
    clearFields(message, [1])

proc hasabilities*(message: ResponseQueryAvailableAbilities): bool =
    result = hasField(message, 1) or (len(message.abilities) > 0)

proc setabilities*(message: ResponseQueryAvailableAbilities, value: seq[AvailableAbility]) =
    message.abilities = value
    setField(message, 1)

proc addabilities*(message: ResponseQueryAvailableAbilities, value: AvailableAbility) =
    add(message.abilities, value)

proc abilities*(message: ResponseQueryAvailableAbilities): seq[AvailableAbility] {.inline.} =
    message.abilities

proc `abilities=`*(message: ResponseQueryAvailableAbilities, value: seq[AvailableAbility]) {.inline.} =
    setabilities(message, value)

proc clearunitTag*(message: ResponseQueryAvailableAbilities) =
    message.unitTag = 0
    clearFields(message, [2])

proc hasunitTag*(message: ResponseQueryAvailableAbilities): bool =
    result = hasField(message, 2)

proc setunitTag*(message: ResponseQueryAvailableAbilities, value: uint64) =
    message.unitTag = value
    setField(message, 2)

proc unitTag*(message: ResponseQueryAvailableAbilities): uint64 {.inline.} =
    message.unitTag

proc `unitTag=`*(message: ResponseQueryAvailableAbilities, value: uint64) {.inline.} =
    setunitTag(message, value)

proc clearunitTypeId*(message: ResponseQueryAvailableAbilities) =
    message.unitTypeId = 0
    clearFields(message, [3])

proc hasunitTypeId*(message: ResponseQueryAvailableAbilities): bool =
    result = hasField(message, 3)

proc setunitTypeId*(message: ResponseQueryAvailableAbilities, value: uint32) =
    message.unitTypeId = value
    setField(message, 3)

proc unitTypeId*(message: ResponseQueryAvailableAbilities): uint32 {.inline.} =
    message.unitTypeId

proc `unitTypeId=`*(message: ResponseQueryAvailableAbilities, value: uint32) {.inline.} =
    setunitTypeId(message, value)

proc `$`*(message: ResponseQueryAvailableAbilities): string =
    runnableExamples:
        echo $ResponseQueryAvailableAbilities
        echo fmt"{ResponseQueryAvailableAbilities}"
        echo &"{ResponseQueryAvailableAbilities}"
    var resultSeq: seq[string]
    if message.hasabilities:
        resultSeq.add(&"abilities: {message.abilities}")
    if message.hasunitTag:
        resultSeq.add(&"unitTag: {message.unitTag}")
    if message.hasunitTypeId:
        resultSeq.add(&"unitTypeId: {message.unitTypeId}")
    result = resultSeq.join(", ")
    result = &"ResponseQueryAvailableAbilities({result})"

proc sizeOfResponseQueryAvailableAbilities*(message: ResponseQueryAvailableAbilities): uint64 =
    for value in message.abilities:
        result = result + sizeOfTag(1, WireType.LengthDelimited)
        result = result + sizeOfLengthDelimited(sizeOfAvailableAbility(value))
    if hasunitTag(message):
        result = result + sizeOfTag(2, WireType.Varint)
        result = result + sizeOfUInt64(message.unitTag)
    if hasunitTypeId(message):
        result = result + sizeOfTag(3, WireType.Varint)
        result = result + sizeOfUInt32(message.unitTypeId)
    result = result + sizeOfUnknownFields(message)

proc writeResponseQueryAvailableAbilities*(stream: Stream, message: ResponseQueryAvailableAbilities) =
    for value in message.abilities:
        writeMessage(stream, value, 1)
    if hasunitTag(message):
        protoWriteUInt64(stream, message.unitTag, 2)
    if hasunitTypeId(message):
        protoWriteUInt32(stream, message.unitTypeId, 3)
    writeUnknownFields(stream, message)

proc readResponseQueryAvailableAbilities*(stream: Stream): ResponseQueryAvailableAbilities =
    result = newResponseQueryAvailableAbilities()
    while not atEnd(stream):
        let
            tag = readTag(stream)
            wireType = wireType(tag)
        case fieldNumber(tag)
        of 0:
            raise newException(InvalidFieldNumberError, "Invalid field number: 0")
        of 1:
            expectWireType(wireType, WireType.LengthDelimited)
            let data = readLengthDelimited(stream)
            addabilities(result, newAvailableAbility(data))
        of 2:
            expectWireType(wireType, WireType.Varint)
            setunitTag(result, protoReadUInt64(stream))
        of 3:
            expectWireType(wireType, WireType.Varint)
            setunitTypeId(result, protoReadUInt32(stream))
        else: readUnknownField(stream, result, tag)

proc serialize*(message: ResponseQueryAvailableAbilities): string =
    let
        ss = newStringStream()
    writeResponseQueryAvailableAbilities(ss, message)
    result = ss.data

proc newResponseQueryAvailableAbilities*(data: string): ResponseQueryAvailableAbilities =
    let
        ss = newStringStream(data)
    result = readResponseQueryAvailableAbilities(ss)

proc newResponseQueryAvailableAbilities*(data: seq[byte]): ResponseQueryAvailableAbilities =
    let
        ss = newStringStream(cast[string](data))
    result = readResponseQueryAvailableAbilities(ss)


proc fullyQualifiedName*(T: typedesc[ResponseQueryBuildingPlacement]): string = "ResponseQueryBuildingPlacement"

proc readResponseQueryBuildingPlacementImpl(stream: Stream): Message = readResponseQueryBuildingPlacement(stream)
proc writeResponseQueryBuildingPlacementImpl(stream: Stream, msg: Message) = writeResponseQueryBuildingPlacement(stream, ResponseQueryBuildingPlacement(msg))

proc ResponseQueryBuildingPlacementProcs*(): MessageProcs =
    result.readImpl = readResponseQueryBuildingPlacementImpl
    result.writeImpl = writeResponseQueryBuildingPlacementImpl

proc newResponseQueryBuildingPlacement*(): ResponseQueryBuildingPlacement =
    new(result)
    initMessage(result[])
    result.procs = ResponseQueryBuildingPlacementProcs()
    result.result = ActionResult.Success

proc clearresult*(message: ResponseQueryBuildingPlacement) =
    message.result = ActionResult.Success
    clearFields(message, [1])

proc hasresult*(message: ResponseQueryBuildingPlacement): bool =
    result = hasField(message, 1)

proc setresult*(message: ResponseQueryBuildingPlacement, value: ActionResult) =
    message.result = value
    setField(message, 1)

proc result*(message: ResponseQueryBuildingPlacement): ActionResult {.inline.} =
    message.result

proc `result=`*(message: ResponseQueryBuildingPlacement, value: ActionResult) {.inline.} =
    setresult(message, value)

proc `$`*(message: ResponseQueryBuildingPlacement): string =
    runnableExamples:
        echo $ResponseQueryBuildingPlacement
        echo fmt"{ResponseQueryBuildingPlacement}"
        echo &"{ResponseQueryBuildingPlacement}"
    var resultSeq: seq[string]
    if message.hasresult:
        resultSeq.add(&"result: {message.result}")
    result = resultSeq.join(", ")
    result = &"ResponseQueryBuildingPlacement({result})"

proc sizeOfResponseQueryBuildingPlacement*(message: ResponseQueryBuildingPlacement): uint64 =
    if hasresult(message):
        result = result + sizeOfTag(1, WireType.Varint)
        result = result + sizeOfEnum[ActionResult](message.result)
    result = result + sizeOfUnknownFields(message)

proc writeResponseQueryBuildingPlacement*(stream: Stream, message: ResponseQueryBuildingPlacement) =
    if hasresult(message):
        protoWriteEnum(stream, message.result, 1)
    writeUnknownFields(stream, message)

proc readResponseQueryBuildingPlacement*(stream: Stream): ResponseQueryBuildingPlacement =
    result = newResponseQueryBuildingPlacement()
    while not atEnd(stream):
        let
            tag = readTag(stream)
            wireType = wireType(tag)
        case fieldNumber(tag)
        of 0:
            raise newException(InvalidFieldNumberError, "Invalid field number: 0")
        of 1:
            expectWireType(wireType, WireType.Varint)
            setresult(result, protoReadEnum[ActionResult](stream))
        else: readUnknownField(stream, result, tag)

proc serialize*(message: ResponseQueryBuildingPlacement): string =
    let
        ss = newStringStream()
    writeResponseQueryBuildingPlacement(ss, message)
    result = ss.data

proc newResponseQueryBuildingPlacement*(data: string): ResponseQueryBuildingPlacement =
    let
        ss = newStringStream(data)
    result = readResponseQueryBuildingPlacement(ss)

proc newResponseQueryBuildingPlacement*(data: seq[byte]): ResponseQueryBuildingPlacement =
    let
        ss = newStringStream(cast[string](data))
    result = readResponseQueryBuildingPlacement(ss)


proc fullyQualifiedName*(T: typedesc[RequestQueryBuildingPlacement]): string = "RequestQueryBuildingPlacement"

proc readRequestQueryBuildingPlacementImpl(stream: Stream): Message = readRequestQueryBuildingPlacement(stream)
proc writeRequestQueryBuildingPlacementImpl(stream: Stream, msg: Message) = writeRequestQueryBuildingPlacement(stream, RequestQueryBuildingPlacement(msg))

proc RequestQueryBuildingPlacementProcs*(): MessageProcs =
    result.readImpl = readRequestQueryBuildingPlacementImpl
    result.writeImpl = writeRequestQueryBuildingPlacementImpl

proc newRequestQueryBuildingPlacement*(): RequestQueryBuildingPlacement =
    new(result)
    initMessage(result[])
    result.procs = RequestQueryBuildingPlacementProcs()
    result.abilityId = 0
    result.targetPos = nil
    result.placingUnitTag = 0

proc clearabilityId*(message: RequestQueryBuildingPlacement) =
    message.abilityId = 0
    clearFields(message, [1])

proc hasabilityId*(message: RequestQueryBuildingPlacement): bool =
    result = hasField(message, 1)

proc setabilityId*(message: RequestQueryBuildingPlacement, value: int32) =
    message.abilityId = value
    setField(message, 1)

proc abilityId*(message: RequestQueryBuildingPlacement): int32 {.inline.} =
    message.abilityId

proc `abilityId=`*(message: RequestQueryBuildingPlacement, value: int32) {.inline.} =
    setabilityId(message, value)

proc cleartargetPos*(message: RequestQueryBuildingPlacement) =
    message.targetPos = nil
    clearFields(message, [2])

proc hastargetPos*(message: RequestQueryBuildingPlacement): bool =
    result = hasField(message, 2)

proc settargetPos*(message: RequestQueryBuildingPlacement, value: Point2D) =
    message.targetPos = value
    setField(message, 2)

proc targetPos*(message: RequestQueryBuildingPlacement): Point2D {.inline.} =
    message.targetPos

proc `targetPos=`*(message: RequestQueryBuildingPlacement, value: Point2D) {.inline.} =
    settargetPos(message, value)

proc clearplacingUnitTag*(message: RequestQueryBuildingPlacement) =
    message.placingUnitTag = 0
    clearFields(message, [3])

proc hasplacingUnitTag*(message: RequestQueryBuildingPlacement): bool =
    result = hasField(message, 3)

proc setplacingUnitTag*(message: RequestQueryBuildingPlacement, value: uint64) =
    message.placingUnitTag = value
    setField(message, 3)

proc placingUnitTag*(message: RequestQueryBuildingPlacement): uint64 {.inline.} =
    message.placingUnitTag

proc `placingUnitTag=`*(message: RequestQueryBuildingPlacement, value: uint64) {.inline.} =
    setplacingUnitTag(message, value)

proc `$`*(message: RequestQueryBuildingPlacement): string =
    runnableExamples:
        echo $RequestQueryBuildingPlacement
        echo fmt"{RequestQueryBuildingPlacement}"
        echo &"{RequestQueryBuildingPlacement}"
    var resultSeq: seq[string]
    if message.hasabilityId:
        resultSeq.add(&"abilityId: {message.abilityId}")
    if message.hastargetPos:
        resultSeq.add(&"targetPos: {message.targetPos}")
    if message.hasplacingUnitTag:
        resultSeq.add(&"placingUnitTag: {message.placingUnitTag}")
    result = resultSeq.join(", ")
    result = &"RequestQueryBuildingPlacement({result})"

proc sizeOfRequestQueryBuildingPlacement*(message: RequestQueryBuildingPlacement): uint64 =
    if hasabilityId(message):
        result = result + sizeOfTag(1, WireType.Varint)
        result = result + sizeOfInt32(message.abilityId)
    if hastargetPos(message):
        result = result + sizeOfTag(2, WireType.LengthDelimited)
        result = result + sizeOfLengthDelimited(sizeOfPoint2D(message.targetPos))
    if hasplacingUnitTag(message):
        result = result + sizeOfTag(3, WireType.Varint)
        result = result + sizeOfUInt64(message.placingUnitTag)
    result = result + sizeOfUnknownFields(message)

proc writeRequestQueryBuildingPlacement*(stream: Stream, message: RequestQueryBuildingPlacement) =
    if hasabilityId(message):
        protoWriteInt32(stream, message.abilityId, 1)
    if hastargetPos(message):
        writeMessage(stream, message.targetPos, 2)
    if hasplacingUnitTag(message):
        protoWriteUInt64(stream, message.placingUnitTag, 3)
    writeUnknownFields(stream, message)

proc readRequestQueryBuildingPlacement*(stream: Stream): RequestQueryBuildingPlacement =
    result = newRequestQueryBuildingPlacement()
    while not atEnd(stream):
        let
            tag = readTag(stream)
            wireType = wireType(tag)
        case fieldNumber(tag)
        of 0:
            raise newException(InvalidFieldNumberError, "Invalid field number: 0")
        of 1:
            expectWireType(wireType, WireType.Varint)
            setabilityId(result, protoReadInt32(stream))
        of 2:
            expectWireType(wireType, WireType.LengthDelimited)
            let data = readLengthDelimited(stream)
            settargetPos(result, newPoint2D(data))
        of 3:
            expectWireType(wireType, WireType.Varint)
            setplacingUnitTag(result, protoReadUInt64(stream))
        else: readUnknownField(stream, result, tag)

proc serialize*(message: RequestQueryBuildingPlacement): string =
    let
        ss = newStringStream()
    writeRequestQueryBuildingPlacement(ss, message)
    result = ss.data

proc newRequestQueryBuildingPlacement*(data: string): RequestQueryBuildingPlacement =
    let
        ss = newStringStream(data)
    result = readRequestQueryBuildingPlacement(ss)

proc newRequestQueryBuildingPlacement*(data: seq[byte]): RequestQueryBuildingPlacement =
    let
        ss = newStringStream(cast[string](data))
    result = readRequestQueryBuildingPlacement(ss)


proc fullyQualifiedName*(T: typedesc[ResponseQueryPathing]): string = "ResponseQueryPathing"

proc readResponseQueryPathingImpl(stream: Stream): Message = readResponseQueryPathing(stream)
proc writeResponseQueryPathingImpl(stream: Stream, msg: Message) = writeResponseQueryPathing(stream, ResponseQueryPathing(msg))

proc ResponseQueryPathingProcs*(): MessageProcs =
    result.readImpl = readResponseQueryPathingImpl
    result.writeImpl = writeResponseQueryPathingImpl

proc newResponseQueryPathing*(): ResponseQueryPathing =
    new(result)
    initMessage(result[])
    result.procs = ResponseQueryPathingProcs()
    result.distance = 0

proc cleardistance*(message: ResponseQueryPathing) =
    message.distance = 0
    clearFields(message, [1])

proc hasdistance*(message: ResponseQueryPathing): bool =
    result = hasField(message, 1)

proc setdistance*(message: ResponseQueryPathing, value: float32) =
    message.distance = value
    setField(message, 1)

proc distance*(message: ResponseQueryPathing): float32 {.inline.} =
    message.distance

proc `distance=`*(message: ResponseQueryPathing, value: float32) {.inline.} =
    setdistance(message, value)

proc `$`*(message: ResponseQueryPathing): string =
    runnableExamples:
        echo $ResponseQueryPathing
        echo fmt"{ResponseQueryPathing}"
        echo &"{ResponseQueryPathing}"
    var resultSeq: seq[string]
    if message.hasdistance:
        resultSeq.add(&"distance: {message.distance}")
    result = resultSeq.join(", ")
    result = &"ResponseQueryPathing({result})"

proc sizeOfResponseQueryPathing*(message: ResponseQueryPathing): uint64 =
    if hasdistance(message):
        result = result + sizeOfTag(1, WireType.Fixed32)
        result = result + sizeOfFloat(message.distance)
    result = result + sizeOfUnknownFields(message)

proc writeResponseQueryPathing*(stream: Stream, message: ResponseQueryPathing) =
    if hasdistance(message):
        protoWriteFloat(stream, message.distance, 1)
    writeUnknownFields(stream, message)

proc readResponseQueryPathing*(stream: Stream): ResponseQueryPathing =
    result = newResponseQueryPathing()
    while not atEnd(stream):
        let
            tag = readTag(stream)
            wireType = wireType(tag)
        case fieldNumber(tag)
        of 0:
            raise newException(InvalidFieldNumberError, "Invalid field number: 0")
        of 1:
            expectWireType(wireType, WireType.Fixed32)
            setdistance(result, protoReadFloat(stream))
        else: readUnknownField(stream, result, tag)

proc serialize*(message: ResponseQueryPathing): string =
    let
        ss = newStringStream()
    writeResponseQueryPathing(ss, message)
    result = ss.data

proc newResponseQueryPathing*(data: string): ResponseQueryPathing =
    let
        ss = newStringStream(data)
    result = readResponseQueryPathing(ss)

proc newResponseQueryPathing*(data: seq[byte]): ResponseQueryPathing =
    let
        ss = newStringStream(cast[string](data))
    result = readResponseQueryPathing(ss)


proc fullyQualifiedName*(T: typedesc[ResponseQuery]): string = "ResponseQuery"

proc readResponseQueryImpl(stream: Stream): Message = readResponseQuery(stream)
proc writeResponseQueryImpl(stream: Stream, msg: Message) = writeResponseQuery(stream, ResponseQuery(msg))

proc ResponseQueryProcs*(): MessageProcs =
    result.readImpl = readResponseQueryImpl
    result.writeImpl = writeResponseQueryImpl

proc newResponseQuery*(): ResponseQuery =
    new(result)
    initMessage(result[])
    result.procs = ResponseQueryProcs()
    result.pathing = @[]
    result.abilities = @[]
    result.placements = @[]

proc clearpathing*(message: ResponseQuery) =
    message.pathing = @[]
    clearFields(message, [1])

proc haspathing*(message: ResponseQuery): bool =
    result = hasField(message, 1) or (len(message.pathing) > 0)

proc setpathing*(message: ResponseQuery, value: seq[ResponseQueryPathing]) =
    message.pathing = value
    setField(message, 1)

proc addpathing*(message: ResponseQuery, value: ResponseQueryPathing) =
    add(message.pathing, value)

proc pathing*(message: ResponseQuery): seq[ResponseQueryPathing] {.inline.} =
    message.pathing

proc `pathing=`*(message: ResponseQuery, value: seq[ResponseQueryPathing]) {.inline.} =
    setpathing(message, value)

proc clearabilities*(message: ResponseQuery) =
    message.abilities = @[]
    clearFields(message, [2])

proc hasabilities*(message: ResponseQuery): bool =
    result = hasField(message, 2) or (len(message.abilities) > 0)

proc setabilities*(message: ResponseQuery, value: seq[ResponseQueryAvailableAbilities]) =
    message.abilities = value
    setField(message, 2)

proc addabilities*(message: ResponseQuery, value: ResponseQueryAvailableAbilities) =
    add(message.abilities, value)

proc abilities*(message: ResponseQuery): seq[ResponseQueryAvailableAbilities] {.inline.} =
    message.abilities

proc `abilities=`*(message: ResponseQuery, value: seq[ResponseQueryAvailableAbilities]) {.inline.} =
    setabilities(message, value)

proc clearplacements*(message: ResponseQuery) =
    message.placements = @[]
    clearFields(message, [3])

proc hasplacements*(message: ResponseQuery): bool =
    result = hasField(message, 3) or (len(message.placements) > 0)

proc setplacements*(message: ResponseQuery, value: seq[ResponseQueryBuildingPlacement]) =
    message.placements = value
    setField(message, 3)

proc addplacements*(message: ResponseQuery, value: ResponseQueryBuildingPlacement) =
    add(message.placements, value)

proc placements*(message: ResponseQuery): seq[ResponseQueryBuildingPlacement] {.inline.} =
    message.placements

proc `placements=`*(message: ResponseQuery, value: seq[ResponseQueryBuildingPlacement]) {.inline.} =
    setplacements(message, value)

proc `$`*(message: ResponseQuery): string =
    runnableExamples:
        echo $ResponseQuery
        echo fmt"{ResponseQuery}"
        echo &"{ResponseQuery}"
    var resultSeq: seq[string]
    if message.haspathing:
        resultSeq.add(&"pathing: {message.pathing}")
    if message.hasabilities:
        resultSeq.add(&"abilities: {message.abilities}")
    if message.hasplacements:
        resultSeq.add(&"placements: {message.placements}")
    result = resultSeq.join(", ")
    result = &"ResponseQuery({result})"

proc sizeOfResponseQuery*(message: ResponseQuery): uint64 =
    for value in message.pathing:
        result = result + sizeOfTag(1, WireType.LengthDelimited)
        result = result + sizeOfLengthDelimited(sizeOfResponseQueryPathing(value))
    for value in message.abilities:
        result = result + sizeOfTag(2, WireType.LengthDelimited)
        result = result + sizeOfLengthDelimited(sizeOfResponseQueryAvailableAbilities(value))
    for value in message.placements:
        result = result + sizeOfTag(3, WireType.LengthDelimited)
        result = result + sizeOfLengthDelimited(sizeOfResponseQueryBuildingPlacement(value))
    result = result + sizeOfUnknownFields(message)

proc writeResponseQuery*(stream: Stream, message: ResponseQuery) =
    for value in message.pathing:
        writeMessage(stream, value, 1)
    for value in message.abilities:
        writeMessage(stream, value, 2)
    for value in message.placements:
        writeMessage(stream, value, 3)
    writeUnknownFields(stream, message)

proc readResponseQuery*(stream: Stream): ResponseQuery =
    result = newResponseQuery()
    while not atEnd(stream):
        let
            tag = readTag(stream)
            wireType = wireType(tag)
        case fieldNumber(tag)
        of 0:
            raise newException(InvalidFieldNumberError, "Invalid field number: 0")
        of 1:
            expectWireType(wireType, WireType.LengthDelimited)
            let data = readLengthDelimited(stream)
            addpathing(result, newResponseQueryPathing(data))
        of 2:
            expectWireType(wireType, WireType.LengthDelimited)
            let data = readLengthDelimited(stream)
            addabilities(result, newResponseQueryAvailableAbilities(data))
        of 3:
            expectWireType(wireType, WireType.LengthDelimited)
            let data = readLengthDelimited(stream)
            addplacements(result, newResponseQueryBuildingPlacement(data))
        else: readUnknownField(stream, result, tag)

proc serialize*(message: ResponseQuery): string =
    let
        ss = newStringStream()
    writeResponseQuery(ss, message)
    result = ss.data

proc newResponseQuery*(data: string): ResponseQuery =
    let
        ss = newStringStream(data)
    result = readResponseQuery(ss)

proc newResponseQuery*(data: seq[byte]): ResponseQuery =
    let
        ss = newStringStream(cast[string](data))
    result = readResponseQuery(ss)


proc fullyQualifiedName*(T: typedesc[RequestQuery]): string = "RequestQuery"

proc readRequestQueryImpl(stream: Stream): Message = readRequestQuery(stream)
proc writeRequestQueryImpl(stream: Stream, msg: Message) = writeRequestQuery(stream, RequestQuery(msg))

proc RequestQueryProcs*(): MessageProcs =
    result.readImpl = readRequestQueryImpl
    result.writeImpl = writeRequestQueryImpl

proc newRequestQuery*(): RequestQuery =
    new(result)
    initMessage(result[])
    result.procs = RequestQueryProcs()
    result.pathing = @[]
    result.abilities = @[]
    result.placements = @[]
    result.ignoreResourceRequirements = false

proc clearpathing*(message: RequestQuery) =
    message.pathing = @[]
    clearFields(message, [1])

proc haspathing*(message: RequestQuery): bool =
    result = hasField(message, 1) or (len(message.pathing) > 0)

proc setpathing*(message: RequestQuery, value: seq[RequestQueryPathing]) =
    message.pathing = value
    setField(message, 1)

proc addpathing*(message: RequestQuery, value: RequestQueryPathing) =
    add(message.pathing, value)

proc pathing*(message: RequestQuery): seq[RequestQueryPathing] {.inline.} =
    message.pathing

proc `pathing=`*(message: RequestQuery, value: seq[RequestQueryPathing]) {.inline.} =
    setpathing(message, value)

proc clearabilities*(message: RequestQuery) =
    message.abilities = @[]
    clearFields(message, [2])

proc hasabilities*(message: RequestQuery): bool =
    result = hasField(message, 2) or (len(message.abilities) > 0)

proc setabilities*(message: RequestQuery, value: seq[RequestQueryAvailableAbilities]) =
    message.abilities = value
    setField(message, 2)

proc addabilities*(message: RequestQuery, value: RequestQueryAvailableAbilities) =
    add(message.abilities, value)

proc abilities*(message: RequestQuery): seq[RequestQueryAvailableAbilities] {.inline.} =
    message.abilities

proc `abilities=`*(message: RequestQuery, value: seq[RequestQueryAvailableAbilities]) {.inline.} =
    setabilities(message, value)

proc clearplacements*(message: RequestQuery) =
    message.placements = @[]
    clearFields(message, [3])

proc hasplacements*(message: RequestQuery): bool =
    result = hasField(message, 3) or (len(message.placements) > 0)

proc setplacements*(message: RequestQuery, value: seq[RequestQueryBuildingPlacement]) =
    message.placements = value
    setField(message, 3)

proc addplacements*(message: RequestQuery, value: RequestQueryBuildingPlacement) =
    add(message.placements, value)

proc placements*(message: RequestQuery): seq[RequestQueryBuildingPlacement] {.inline.} =
    message.placements

proc `placements=`*(message: RequestQuery, value: seq[RequestQueryBuildingPlacement]) {.inline.} =
    setplacements(message, value)

proc clearignoreResourceRequirements*(message: RequestQuery) =
    message.ignoreResourceRequirements = false
    clearFields(message, [4])

proc hasignoreResourceRequirements*(message: RequestQuery): bool =
    result = hasField(message, 4)

proc setignoreResourceRequirements*(message: RequestQuery, value: bool) =
    message.ignoreResourceRequirements = value
    setField(message, 4)

proc ignoreResourceRequirements*(message: RequestQuery): bool {.inline.} =
    message.ignoreResourceRequirements

proc `ignoreResourceRequirements=`*(message: RequestQuery, value: bool) {.inline.} =
    setignoreResourceRequirements(message, value)

proc `$`*(message: RequestQuery): string =
    runnableExamples:
        echo $RequestQuery
        echo fmt"{RequestQuery}"
        echo &"{RequestQuery}"
    var resultSeq: seq[string]
    if message.haspathing:
        resultSeq.add(&"pathing: {message.pathing}")
    if message.hasabilities:
        resultSeq.add(&"abilities: {message.abilities}")
    if message.hasplacements:
        resultSeq.add(&"placements: {message.placements}")
    if message.hasignoreResourceRequirements:
        resultSeq.add(&"ignoreResourceRequirements: {message.ignoreResourceRequirements}")
    result = resultSeq.join(", ")
    result = &"RequestQuery({result})"

proc sizeOfRequestQuery*(message: RequestQuery): uint64 =
    for value in message.pathing:
        result = result + sizeOfTag(1, WireType.LengthDelimited)
        result = result + sizeOfLengthDelimited(sizeOfRequestQueryPathing(value))
    for value in message.abilities:
        result = result + sizeOfTag(2, WireType.LengthDelimited)
        result = result + sizeOfLengthDelimited(sizeOfRequestQueryAvailableAbilities(value))
    for value in message.placements:
        result = result + sizeOfTag(3, WireType.LengthDelimited)
        result = result + sizeOfLengthDelimited(sizeOfRequestQueryBuildingPlacement(value))
    if hasignoreResourceRequirements(message):
        result = result + sizeOfTag(4, WireType.Varint)
        result = result + sizeOfBool(message.ignoreResourceRequirements)
    result = result + sizeOfUnknownFields(message)

proc writeRequestQuery*(stream: Stream, message: RequestQuery) =
    for value in message.pathing:
        writeMessage(stream, value, 1)
    for value in message.abilities:
        writeMessage(stream, value, 2)
    for value in message.placements:
        writeMessage(stream, value, 3)
    if hasignoreResourceRequirements(message):
        protoWriteBool(stream, message.ignoreResourceRequirements, 4)
    writeUnknownFields(stream, message)

proc readRequestQuery*(stream: Stream): RequestQuery =
    result = newRequestQuery()
    while not atEnd(stream):
        let
            tag = readTag(stream)
            wireType = wireType(tag)
        case fieldNumber(tag)
        of 0:
            raise newException(InvalidFieldNumberError, "Invalid field number: 0")
        of 1:
            expectWireType(wireType, WireType.LengthDelimited)
            let data = readLengthDelimited(stream)
            addpathing(result, newRequestQueryPathing(data))
        of 2:
            expectWireType(wireType, WireType.LengthDelimited)
            let data = readLengthDelimited(stream)
            addabilities(result, newRequestQueryAvailableAbilities(data))
        of 3:
            expectWireType(wireType, WireType.LengthDelimited)
            let data = readLengthDelimited(stream)
            addplacements(result, newRequestQueryBuildingPlacement(data))
        of 4:
            expectWireType(wireType, WireType.Varint)
            setignoreResourceRequirements(result, protoReadBool(stream))
        else: readUnknownField(stream, result, tag)

proc serialize*(message: RequestQuery): string =
    let
        ss = newStringStream()
    writeRequestQuery(ss, message)
    result = ss.data

proc newRequestQuery*(data: string): RequestQuery =
    let
        ss = newStringStream(data)
    result = readRequestQuery(ss)

proc newRequestQuery*(data: seq[byte]): RequestQuery =
    let
        ss = newStringStream(cast[string](data))
    result = readRequestQuery(ss)


