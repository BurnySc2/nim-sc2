
syntax = "proto2";

package SC2APIProtocol;

//
// Notes:
//  Single player flow:
//    1) Call Request.create_game with a valid single player map (a multiplayer map will end right away).
//    2) Call Request.join_game, wait for the response.
//    3) Request.end will terminate the game. Observations can still be made.
//  Multi-player flow:
//    1) Launch two game instances with separate ports.
//    2) Designate a host, and Request.create_game with a multiplayer map.
//    3) Call Request.join on BOTH clients. Join will block until both clients connect.
//    4) Wait for a response from both clients. They can now play/step.
//    5) Steps should be syncronized. One client may time out if they are not. Multiple step sizes are ok.
//    4) Call Request.leave at any point or when the game ends. Observations will not be valid after this.
//
// States:
//
//------------------|---------------------------------------------------|-----------------------|
//  Request         | Valid in State                                    | Transition to State   |
//------------------|---------------------------------------------------|-----------------------|
// create_game      | launched                                          | init_game             |
//                  | ended (singleplayer only)                         | init_game             |
// join_game*       | init_game (singleplayer or multiplayer host only) | in_game               |
//                  | launched (multiplayer client only)                | in_game               |
// restart_game     | ended                                             | in_game               |
// start_replay     | launched                                          | in_replay             |
//                  | ended (singleplayer only)                         |                       |
// leave_game       | in_game (required when finishing multiplayer)     | launched              |
// quick_save       | in_game                                           |                       |
// quick_load       | in_game                                           |                       |
//                  | ended                                             |                       |
// quit             | any                                               | quit (not sent)       |
// game_info        | in_game                                           |                       |
//                  | in_replay                                         |                       |
//                  | ended                                             |                       |
// observation      | in_game                                           |                       |
//                  | in_replay                                         |                       |
//                  | ended                                             |                       |
// step*            | in_game (not available in realtime mode)          | in_game               |
//                  | in_replay                                         | ended                 |
// action           | in_game (not available to observers)              |                       |
// obs_action       | in_game (only for observers)                      |                       |
//                  | in_replay                                         |                       |
// data             | in_game                                           |                       |
//                  | in_replay                                         |                       |
//                  | ended                                             |                       |
// query            | in_game                                           |                       |
//                  | in_replay                                         |                       |
//                  | ended                                             |                       |
// save_replay      | in_game                                           |                       |
//                  | ended (only after a game)                         |                       |
// map_command      | in_game                                           |                       |
// replay_info      | any                                               |                       |
// available_maps   | any                                               |                       |
// save_map         | any                                               |                       |
// ping             | any                                               |                       |
// debug            | in_game                                           | various               |
//------------------|---------------------------------------------------|-----------------------|
//
// * In multiplayer, these require synchronization between clients.
//
// Notes:
//      - if a request fails, the game remains in the current state.
//

//
// Request/Response
//

message Request {
  oneof request {
    // Game Setup
    RequestCreateGame create_game = 1;          // Send to host to initialize game.
    RequestJoinGame join_game = 2;              // Send to host and all clients for game to begin.
  }
}

message Response {
  oneof response {
    ResponseCreateGame create_game = 1;
    ResponseJoinGame join_game = 2;

    // Debugging
    ResponsePing ping = 19;
    ResponseDebug debug = 20;
  }
  optional uint32 id = 97;
  repeated string error = 98;                   // If command is missing, this will contain the error. Otherwise this will contain any warnings.
  optional int32 status = 99;                  // Should be sent back with all responses.
}

// If successful, puts the game into the status: init_game.
// The next expected request should be RequestJoinGame. Can also quit (exit).
message RequestCreateGame {
  oneof Map {
    LocalMap local_map = 1;                         // Local .SC2Map file
    string battlenet_map_name = 2;                  // Map published to BattleNet
  }
  repeated PlayerSetup player_setup = 3;
  optional bool disable_fog = 4;

  optional uint32 random_seed = 5;                  // Sets the pseudo-random seed for the game.
  optional bool realtime = 6;                       // If set, the game plays in real time.
}

message LocalMap {
  // A map can be specified either by a file path or the data of the .SC2Map file.
  // If you provide both, it will play the game using map_data and store map_path
  // into the replay. (260 character max)
  optional string map_path = 1;
  optional bytes map_data = 7;
}

message ResponseCreateGame {
  optional string error_details = 2;
}

message RequestJoinGame {
  oneof participation {
    int32 race = 1;                          // Join as participant
    uint32 observed_player_id = 2;          // Join as observer
  }

  optional InterfaceOptions options = 3;    // This is limited to what is specified in RequestCreateGame, but you can request less information if you want.
  optional PortSet server_ports = 4;        // Do not set in the single-player case. This is the port a server will use.
  repeated PortSet client_ports = 5;        // Do not set in the single-player case. These are the ports clients will use to initialize communication.
                                            // Currently only a singe client is supported.
  optional int32 shared_port = 6;  // deprecated
  optional string player_name = 7;          // Use this to set the player's name to something other than autogenerated name.
  optional string host_ip = 8;     // Both game creator and joiner should provide the ip address of the game creator in order to play remotely. Defaults to localhost.
}


message InterfaceOptions {
  // Interface options
  optional bool raw = 1;
  optional bool score = 2;
  optional bool show_cloaked = 5;                   // By default cloaked units are completely hidden. This shows some details.
  optional bool show_burrowed_shadows = 9;          // By default burrowed units are completely hidden. This shows some details for those that produce a shadow.
  optional bool show_placeholders = 8;              // Return placeholder units (buildings to be constructed), both for raw and feature layers.

  // By default raw actions select, act and revert the selection. This is useful
  // if you're playing simultaneously with the agent so it doesn't steal your
  // selection. This inflates APM (due to deselect) and makes the actions hard
  // to follow in a replay. Setting this to true will cause raw actions to do
  // select, act, but not revert the selection.
  optional bool raw_affects_selection = 6;

  // Changes the coordinates in raw.proto to be relative to the playable area.
  // The map_size and playable_area will be the diagonal of the real playable area.
  optional bool raw_crop_to_playable_area = 7;
}

message PortSet {
  optional int32 game_port = 1;             // Game right now needs two internal ports to establish a multiplay game on the local host.
  optional int32 base_port = 2;
}

message ResponseJoinGame {
  optional uint32 player_id = 1;
  optional int32 error = 2;
  optional string error_details = 3;
}


message ResponsePing {
  optional string game_version = 1;
  optional string data_version = 2;
  optional uint32 data_build = 3;
  optional uint32 base_build = 4;
}
message ResponseDebug {
}


message PlayerSetup {
  optional int32 type = 1;

  // Only used for a computer player.
  optional int32 race = 2;
  optional int32 difficulty = 3;
  //optional string player_name = 4;
  //optional int32 ai_build = 5;
}
